// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/04/2018 11:28:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cofre
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cofre_vlg_sample_tst(
	clk,
	clk_FPGA,
	cs,
	reset,
	teclas,
	sampler_tx
);
input  clk;
input  clk_FPGA;
input  cs;
input  reset;
input [7:0] teclas;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clk_FPGA or cs or reset or teclas)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cofre_vlg_check_tst (
	abre,
	bloqueado,
	estado,
	memoria,
	modo,
	salvou,
	teclasSAIDA,
	sampler_rx
);
input  abre;
input  bloqueado;
input [2:0] estado;
input [7:0] memoria;
input  modo;
input  salvou;
input [7:0] teclasSAIDA;
input sampler_rx;

reg  abre_expected;
reg  bloqueado_expected;
reg [2:0] estado_expected;
reg [7:0] memoria_expected;
reg  modo_expected;
reg  salvou_expected;
reg [7:0] teclasSAIDA_expected;

reg  abre_prev;
reg  bloqueado_prev;
reg [2:0] estado_prev;
reg [7:0] memoria_prev;
reg  modo_prev;
reg  salvou_prev;
reg [7:0] teclasSAIDA_prev;

reg  abre_expected_prev;
reg  bloqueado_expected_prev;
reg [2:0] estado_expected_prev;
reg [7:0] memoria_expected_prev;
reg  modo_expected_prev;
reg  salvou_expected_prev;
reg [7:0] teclasSAIDA_expected_prev;

reg  last_abre_exp;
reg  last_bloqueado_exp;
reg [2:0] last_estado_exp;
reg [7:0] last_memoria_exp;
reg  last_modo_exp;
reg  last_salvou_exp;
reg [7:0] last_teclasSAIDA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	abre_prev = abre;
	bloqueado_prev = bloqueado;
	estado_prev = estado;
	memoria_prev = memoria;
	modo_prev = modo;
	salvou_prev = salvou;
	teclasSAIDA_prev = teclasSAIDA;
end

// update expected /o prevs

always @(trigger)
begin
	abre_expected_prev = abre_expected;
	bloqueado_expected_prev = bloqueado_expected;
	estado_expected_prev = estado_expected;
	memoria_expected_prev = memoria_expected;
	modo_expected_prev = modo_expected;
	salvou_expected_prev = salvou_expected;
	teclasSAIDA_expected_prev = teclasSAIDA_expected;
end



// expected abre
initial
begin
	abre_expected = 1'bX;
end 

// expected bloqueado
initial
begin
	bloqueado_expected = 1'bX;
end 
// expected estado[ 2 ]
initial
begin
	estado_expected[2] = 1'bX;
end 
// expected estado[ 1 ]
initial
begin
	estado_expected[1] = 1'bX;
end 
// expected estado[ 0 ]
initial
begin
	estado_expected[0] = 1'bX;
end 

// expected modo
initial
begin
	modo_expected = 1'bX;
end 

// expected salvou
initial
begin
	salvou_expected = 1'bX;
end 
// expected memoria[ 7 ]
initial
begin
	memoria_expected[7] = 1'bX;
end 
// expected memoria[ 6 ]
initial
begin
	memoria_expected[6] = 1'bX;
end 
// expected memoria[ 5 ]
initial
begin
	memoria_expected[5] = 1'bX;
end 
// expected memoria[ 4 ]
initial
begin
	memoria_expected[4] = 1'bX;
end 
// expected memoria[ 3 ]
initial
begin
	memoria_expected[3] = 1'bX;
end 
// expected memoria[ 2 ]
initial
begin
	memoria_expected[2] = 1'bX;
end 
// expected memoria[ 1 ]
initial
begin
	memoria_expected[1] = 1'bX;
end 
// expected memoria[ 0 ]
initial
begin
	memoria_expected[0] = 1'bX;
end 
// expected teclasSAIDA[ 7 ]
initial
begin
	teclasSAIDA_expected[7] = 1'bX;
end 
// expected teclasSAIDA[ 6 ]
initial
begin
	teclasSAIDA_expected[6] = 1'bX;
end 
// expected teclasSAIDA[ 5 ]
initial
begin
	teclasSAIDA_expected[5] = 1'bX;
end 
// expected teclasSAIDA[ 4 ]
initial
begin
	teclasSAIDA_expected[4] = 1'bX;
end 
// expected teclasSAIDA[ 3 ]
initial
begin
	teclasSAIDA_expected[3] = 1'bX;
end 
// expected teclasSAIDA[ 2 ]
initial
begin
	teclasSAIDA_expected[2] = 1'bX;
end 
// expected teclasSAIDA[ 1 ]
initial
begin
	teclasSAIDA_expected[1] = 1'bX;
end 
// expected teclasSAIDA[ 0 ]
initial
begin
	teclasSAIDA_expected[0] = 1'bX;
end 
// generate trigger
always @(abre_expected or abre or bloqueado_expected or bloqueado or estado_expected or estado or memoria_expected or memoria or modo_expected or modo or salvou_expected or salvou or teclasSAIDA_expected or teclasSAIDA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected abre = %b | expected bloqueado = %b | expected estado = %b | expected memoria = %b | expected modo = %b | expected salvou = %b | expected teclasSAIDA = %b | ",abre_expected_prev,bloqueado_expected_prev,estado_expected_prev,memoria_expected_prev,modo_expected_prev,salvou_expected_prev,teclasSAIDA_expected_prev);
	$display("| real abre = %b | real bloqueado = %b | real estado = %b | real memoria = %b | real modo = %b | real salvou = %b | real teclasSAIDA = %b | ",abre_prev,bloqueado_prev,estado_prev,memoria_prev,modo_prev,salvou_prev,teclasSAIDA_prev);
`endif
	if (
		( abre_expected_prev !== 1'bx ) && ( abre_prev !== abre_expected_prev )
		&& ((abre_expected_prev !== last_abre_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abre :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abre_expected_prev);
		$display ("     Real value = %b", abre_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abre_exp = abre_expected_prev;
	end
	if (
		( bloqueado_expected_prev !== 1'bx ) && ( bloqueado_prev !== bloqueado_expected_prev )
		&& ((bloqueado_expected_prev !== last_bloqueado_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bloqueado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bloqueado_expected_prev);
		$display ("     Real value = %b", bloqueado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bloqueado_exp = bloqueado_expected_prev;
	end
	if (
		( estado_expected_prev[0] !== 1'bx ) && ( estado_prev[0] !== estado_expected_prev[0] )
		&& ((estado_expected_prev[0] !== last_estado_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_estado_exp[0] = estado_expected_prev[0];
	end
	if (
		( estado_expected_prev[1] !== 1'bx ) && ( estado_prev[1] !== estado_expected_prev[1] )
		&& ((estado_expected_prev[1] !== last_estado_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_estado_exp[1] = estado_expected_prev[1];
	end
	if (
		( estado_expected_prev[2] !== 1'bx ) && ( estado_prev[2] !== estado_expected_prev[2] )
		&& ((estado_expected_prev[2] !== last_estado_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estado_expected_prev);
		$display ("     Real value = %b", estado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_estado_exp[2] = estado_expected_prev[2];
	end
	if (
		( memoria_expected_prev[0] !== 1'bx ) && ( memoria_prev[0] !== memoria_expected_prev[0] )
		&& ((memoria_expected_prev[0] !== last_memoria_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[0] = memoria_expected_prev[0];
	end
	if (
		( memoria_expected_prev[1] !== 1'bx ) && ( memoria_prev[1] !== memoria_expected_prev[1] )
		&& ((memoria_expected_prev[1] !== last_memoria_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[1] = memoria_expected_prev[1];
	end
	if (
		( memoria_expected_prev[2] !== 1'bx ) && ( memoria_prev[2] !== memoria_expected_prev[2] )
		&& ((memoria_expected_prev[2] !== last_memoria_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[2] = memoria_expected_prev[2];
	end
	if (
		( memoria_expected_prev[3] !== 1'bx ) && ( memoria_prev[3] !== memoria_expected_prev[3] )
		&& ((memoria_expected_prev[3] !== last_memoria_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[3] = memoria_expected_prev[3];
	end
	if (
		( memoria_expected_prev[4] !== 1'bx ) && ( memoria_prev[4] !== memoria_expected_prev[4] )
		&& ((memoria_expected_prev[4] !== last_memoria_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[4] = memoria_expected_prev[4];
	end
	if (
		( memoria_expected_prev[5] !== 1'bx ) && ( memoria_prev[5] !== memoria_expected_prev[5] )
		&& ((memoria_expected_prev[5] !== last_memoria_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[5] = memoria_expected_prev[5];
	end
	if (
		( memoria_expected_prev[6] !== 1'bx ) && ( memoria_prev[6] !== memoria_expected_prev[6] )
		&& ((memoria_expected_prev[6] !== last_memoria_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[6] = memoria_expected_prev[6];
	end
	if (
		( memoria_expected_prev[7] !== 1'bx ) && ( memoria_prev[7] !== memoria_expected_prev[7] )
		&& ((memoria_expected_prev[7] !== last_memoria_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memoria_expected_prev);
		$display ("     Real value = %b", memoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_memoria_exp[7] = memoria_expected_prev[7];
	end
	if (
		( modo_expected_prev !== 1'bx ) && ( modo_prev !== modo_expected_prev )
		&& ((modo_expected_prev !== last_modo_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port modo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", modo_expected_prev);
		$display ("     Real value = %b", modo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_modo_exp = modo_expected_prev;
	end
	if (
		( salvou_expected_prev !== 1'bx ) && ( salvou_prev !== salvou_expected_prev )
		&& ((salvou_expected_prev !== last_salvou_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port salvou :: @time = %t",  $realtime);
		$display ("     Expected value = %b", salvou_expected_prev);
		$display ("     Real value = %b", salvou_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_salvou_exp = salvou_expected_prev;
	end
	if (
		( teclasSAIDA_expected_prev[0] !== 1'bx ) && ( teclasSAIDA_prev[0] !== teclasSAIDA_expected_prev[0] )
		&& ((teclasSAIDA_expected_prev[0] !== last_teclasSAIDA_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[0] = teclasSAIDA_expected_prev[0];
	end
	if (
		( teclasSAIDA_expected_prev[1] !== 1'bx ) && ( teclasSAIDA_prev[1] !== teclasSAIDA_expected_prev[1] )
		&& ((teclasSAIDA_expected_prev[1] !== last_teclasSAIDA_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[1] = teclasSAIDA_expected_prev[1];
	end
	if (
		( teclasSAIDA_expected_prev[2] !== 1'bx ) && ( teclasSAIDA_prev[2] !== teclasSAIDA_expected_prev[2] )
		&& ((teclasSAIDA_expected_prev[2] !== last_teclasSAIDA_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[2] = teclasSAIDA_expected_prev[2];
	end
	if (
		( teclasSAIDA_expected_prev[3] !== 1'bx ) && ( teclasSAIDA_prev[3] !== teclasSAIDA_expected_prev[3] )
		&& ((teclasSAIDA_expected_prev[3] !== last_teclasSAIDA_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[3] = teclasSAIDA_expected_prev[3];
	end
	if (
		( teclasSAIDA_expected_prev[4] !== 1'bx ) && ( teclasSAIDA_prev[4] !== teclasSAIDA_expected_prev[4] )
		&& ((teclasSAIDA_expected_prev[4] !== last_teclasSAIDA_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[4] = teclasSAIDA_expected_prev[4];
	end
	if (
		( teclasSAIDA_expected_prev[5] !== 1'bx ) && ( teclasSAIDA_prev[5] !== teclasSAIDA_expected_prev[5] )
		&& ((teclasSAIDA_expected_prev[5] !== last_teclasSAIDA_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[5] = teclasSAIDA_expected_prev[5];
	end
	if (
		( teclasSAIDA_expected_prev[6] !== 1'bx ) && ( teclasSAIDA_prev[6] !== teclasSAIDA_expected_prev[6] )
		&& ((teclasSAIDA_expected_prev[6] !== last_teclasSAIDA_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[6] = teclasSAIDA_expected_prev[6];
	end
	if (
		( teclasSAIDA_expected_prev[7] !== 1'bx ) && ( teclasSAIDA_prev[7] !== teclasSAIDA_expected_prev[7] )
		&& ((teclasSAIDA_expected_prev[7] !== last_teclasSAIDA_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teclasSAIDA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teclasSAIDA_expected_prev);
		$display ("     Real value = %b", teclasSAIDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_teclasSAIDA_exp[7] = teclasSAIDA_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cofre_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk_FPGA;
reg cs;
reg reset;
reg [7:0] teclas;
// wires                                               
wire abre;
wire bloqueado;
wire [2:0] estado;
wire [7:0] memoria;
wire modo;
wire salvou;
wire [7:0] teclasSAIDA;

wire sampler;                             

// assign statements (if any)                          
cofre i1 (
// port map - connection between master ports and signals/registers   
	.abre(abre),
	.bloqueado(bloqueado),
	.clk(clk),
	.clk_FPGA(clk_FPGA),
	.cs(cs),
	.estado(estado),
	.memoria(memoria),
	.modo(modo),
	.reset(reset),
	.salvou(salvou),
	.teclas(teclas),
	.teclasSAIDA(teclasSAIDA)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #100000 1'b1;
	clk = #20000 1'b0;
	clk = #210000 1'b1;
	clk = #20000 1'b0;
	clk = #210000 1'b1;
	clk = #40000 1'b0;
end 

// clk_FPGA
always
begin
	clk_FPGA = 1'b0;
	clk_FPGA = #10000 1'b1;
	#10000;
end 

// cs
initial
begin
	cs = 1'b0;
	cs = #230000 1'b1;
	cs = #410000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #470000 1'b1;
	reset = #30000 1'b0;
	reset = #270000 1'b1;
	reset = #30000 1'b0;
end 
// teclas[ 7 ]
initial
begin
	teclas[7] = 1'b0;
end 
// teclas[ 6 ]
initial
begin
	teclas[6] = 1'b0;
end 
// teclas[ 5 ]
initial
begin
	teclas[5] = 1'b1;
	teclas[5] = #180000 1'b0;
	teclas[5] = #120000 1'b1;
	teclas[5] = #170000 1'b0;
end 
// teclas[ 4 ]
initial
begin
	teclas[4] = 1'b1;
	teclas[4] = #180000 1'b0;
	teclas[4] = #120000 1'b1;
	teclas[4] = #170000 1'b0;
end 
// teclas[ 3 ]
initial
begin
	teclas[3] = 1'b1;
	teclas[3] = #180000 1'b0;
	teclas[3] = #120000 1'b1;
	teclas[3] = #170000 1'b0;
end 
// teclas[ 2 ]
initial
begin
	teclas[2] = 1'b1;
	teclas[2] = #180000 1'b0;
	teclas[2] = #120000 1'b1;
	teclas[2] = #170000 1'b0;
end 
// teclas[ 1 ]
initial
begin
	teclas[1] = 1'b0;
end 
// teclas[ 0 ]
initial
begin
	teclas[0] = 1'b0;
end 

cofre_vlg_sample_tst tb_sample (
	.clk(clk),
	.clk_FPGA(clk_FPGA),
	.cs(cs),
	.reset(reset),
	.teclas(teclas),
	.sampler_tx(sampler)
);

cofre_vlg_check_tst tb_out(
	.abre(abre),
	.bloqueado(bloqueado),
	.estado(estado),
	.memoria(memoria),
	.modo(modo),
	.salvou(salvou),
	.teclasSAIDA(teclasSAIDA),
	.sampler_rx(sampler)
);
endmodule

